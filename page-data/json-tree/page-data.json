{"componentChunkName":"component---src-templates-blog-post-js","path":"/json-tree/","webpackCompilationHash":"fe4b98b4e443afde89a7","result":{"data":{"mdx":{"id":"4b1f4c66-a9e9-5d39-819f-17c20328f0e0","excerpt":"扁平数据转树结构 树结构扁平化 源码位置 tree.js","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"树形结构与扁平结构相互转换\",\n  \"date\": \"2020-12-15T00:00:00.000Z\",\n  \"tags\": \"Javascript\",\n  \"description\": \"树形结构与扁平结构相互转换\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"\\u6241\\u5E73\\u6570\\u636E\\u8F6C\\u6811\\u7ED3\\u6784\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Javascript\"\n  }), \"/**\\n * const arr = [\\n *  { id: 2, name: 'B', pid: 0 },\\n *  { id: 3, name: 'C', pid: 1 },\\n *  { id: 1, name: 'A', pid: 2 },\\n *  { id: 4, name: 'D', pid: 1 },\\n *  { id: 5, name: 'E', pid: 2 },\\n *  { id: 6, name: 'F', pid: 3 },\\n *  { id: 7, name: 'G', pid: 2 },\\n *  { id: 8, name: 'H', pid: 4 },\\n *  { id: 9, name: 'I', pid: 0 }\\n * ];\\n*\\n* */\\nfunction toTree(list) {\\n  let result = [];\\n  // \\u5C06\\u6570\\u7EC4\\u8F6C\\u6210\\u5BF9\\u8C61\\u5F62\\u5F0F\\n  const obj = list.reduce((res, v) => {\\n    res[v.id] = v;\\n    return res;\\n  }, {});\\n  list.forEach(l => {\\n    let parent = obj[l.pid];\\n    if (parent) {\\n      if (!parent.children) { parent.children = [] }\\n      parent.children.push(l);\\n    } else {\\n      result.push(l);\\n    }\\n  })\\n  return result;\\n}\\n\\ntoTree(arr);\\n// \\u7ED3\\u679C\\uFF1A\\n//\\n//     9     7    3 -- 6\\n//    /     /    /\\n//   0 -- 2 -- 1 -- 4 -- 8\\n//         \\\\\\n//          5\\n\")), mdx(\"h2\", null, \"\\u6811\\u7ED3\\u6784\\u6241\\u5E73\\u5316\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Javascript\"\n  }), \"function flatten(data) {\\n  return data.reduce((arr, { children = [], ...rest }) =>\\n    arr.concat([rest], flatten(children)), []\\n  )\\n}\\n\")), mdx(\"h2\", null, \"\\u6E90\\u7801\\u4F4D\\u7F6E\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/buildGoodWeb/blog/blob/master/src/demo/javascript/tree.js\"\n  }), \"tree.js\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"扁平数据转树结构","depth":2},{"value":"树结构扁平化","depth":2},{"value":"源码位置","depth":2}],"frontmatter":{"title":"树形结构与扁平结构相互转换","date":"2020-12-15","description":"树形结构与扁平结构相互转换"}},"file":{"relativePath":"json-tree.pdf","publicURL":"/blog/static/json-tree-020687b509a94175f6f4e2a0751837e2.pdf"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/json-tree/","previous":{"fields":{"slug":"/write-tools/"},"frontmatter":{"title":"写作工具收集"}},"next":{"fields":{"slug":"/electron-tray/"},"frontmatter":{"title":"Electron 应用处理长任务"}}}}}