{"componentChunkName":"component---src-templates-blog-post-js","path":"/ts-type/","webpackCompilationHash":"fe4b98b4e443afde89a7","result":{"data":{"mdx":{"id":"ca8e8b76-eb5a-5568-97fb-a7674676c765","excerpt":"梳理  Typescript  的类型使用。 使用 Typescript ECMAScript APIs  的定义。 转换 Partial 全部指定为可选类型 示例 实现 部分指定为可选类型 实现 Omit 去掉指定字段联合 Pick 出指定字段设置为可选 示例 将 name、endpoint…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Typescript 类型\",\n  \"date\": \"2019-09-12T00:00:00.000Z\",\n  \"tag\": \"Typescript\",\n  \"description\": \"Typescript ES2015 类型\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u68B3\\u7406 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Typescript\"), \" \\u7684\\u7C7B\\u578B\\u4F7F\\u7528\\u3002\"), mdx(\"h2\", null, \"\\u4F7F\\u7528\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/microsoft/TypeScript/blob/master/lib/lib.es5.d.ts\"\n  }), \"Typescript ECMAScript APIs\"), \" \\u7684\\u5B9A\\u4E49\\u3002\"), mdx(\"h2\", null, \"\\u8F6C\\u6362\"), mdx(\"h3\", null, \"Partial \\u5168\\u90E8\\u6307\\u5B9A\\u4E3A\\u53EF\\u9009\\u7C7B\\u578B\"), mdx(\"h4\", null, \"\\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Foo = {\\n    a: number;\\n    b: string;\\n    c: boolean;\\n};\\n\\ntype FooPartial = Partial<Foo>;\\n//=> { a?: number; b?: string; c?: boolean }\\n\")), mdx(\"h4\", null, \"\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Partial<T> = {\\n  [P in keyof T]?: T[P];\\n};\\n\")), mdx(\"h3\", null, \"\\u90E8\\u5206\\u6307\\u5B9A\\u4E3A\\u53EF\\u9009\\u7C7B\\u578B\"), mdx(\"h4\", null, \"\\u5B9E\\u73B0\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Omit \\u53BB\\u6389\\u6307\\u5B9A\\u5B57\\u6BB5\\u8054\\u5408 Pick \\u51FA\\u6307\\u5B9A\\u5B57\\u6BB5\\u8BBE\\u7F6E\\u4E3A\\u53EF\\u9009\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\\n\")), mdx(\"h4\", null, \"\\u793A\\u4F8B\"), mdx(\"p\", null, \"\\u5C06 name\\u3001endpoint \\u6807\\u8BB0\\u4E3A\\u53EF\\u9009\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type AccountFormType = {\\n  name: string,\\n  endpoint: string,\\n  accessKey: string,\\n  secretKey: string,\\n  region?: string,\\n}\\ntype AccountFormOptionalType = WithOptional<AccountFormType, 'name' | 'endpoint'>\\n// => \\n// {\\n//   name?: string;\\n//   accessKey?: string\\n//   secretKey: string\\n//   endpoint: string\\n//   region?: string\\n// }\\n\")), mdx(\"h2\", null, \"\\u8FC7\\u6EE4\"), mdx(\"h3\", null, \"Pick \\u9009\\u53D6\\u6307\\u5B9A\\u7684\\u7C7B\\u578B\"), mdx(\"h4\", null, \"\\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Foo = {\\n    a: number;\\n    b: string;\\n    c: boolean;\\n};\\n\\ntype FooWithAC = Pick<Foo, 'a' | 'c'>;\\n//=> { a: number; c: boolean };\\n\")), mdx(\"h4\", null, \"\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Pick<T, K extends keyof T> = {\\n  [P in K]: T[P];\\n};\\n\")), mdx(\"h3\", null, \"Omit \\u53BB\\u6389\\u6307\\u5B9A\\u7684\\u7C7B\\u578B\\u3002\"), mdx(\"h4\", null, \"\\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Foo = {\\n    a: number;\\n    b: string;\\n    c: boolean;\\n};\\ntype FooWithoutA = Omit<Foo, 'a' | 'c'>;\\n//=> { b: string };\\n\")), mdx(\"h4\", null, \"\\u5B9E\\u73B0\\u4EE3\\u7801\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Except<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\\n\")), mdx(\"h3\", null, \"Record\"), mdx(\"h3\", null, \"\\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Foo = {\\n    a: number;\\n    b: string;\\n    c: boolean;\\n};\\ntype FooRecordWithString = Record<string, Foo>\\n//=> { [x: string]: Fo }\\n\")), mdx(\"h4\", null, \"\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Record<K extends keyof any, T> = {\\n    [P in K]: T;\\n}\\n\")), mdx(\"h3\", null, \"Exclude \\u6392\\u9664\\u53EF\\u5206\\u914D\\u7684\\u7C7B\\u578B\"), mdx(\"h4\", null, \"\\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Foo = {\\n    a: number;\\n    b: string;\\n    c: boolean;\\n};\\n\\ntype FooKey = keyof Foo; //=> \\\"a\\\" | \\\"b\\\" | \\\"c\\\"\\ntype FooKeyWithoutAC = Exclude<KeyOf, 'a' | 'c'> //=> \\\"b\\\"\\n\")), mdx(\"h4\", null, \"\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Exclude<T, U> = T extends U ? never : T;\\n\")), mdx(\"h3\", null, \"Extract \\u9009\\u62E9\\u53EF\\u5206\\u914D\\u7684\\u7C7B\\u578B\"), mdx(\"h4\", null, \"\\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Foo = {\\n    a: number;\\n    b: string;\\n    c: boolean;\\n};\\n\\ntype FooKey = keyof Foo; //=> \\\"a\\\" | \\\"b\\\" | \\\"c\\\"\\ntype FooKeyWithAC = Extract<KeyOf, 'a' | 'c'> //=> \\\"a\\\" | \\\"c\\\"\\n\")), mdx(\"h4\", null, \"\\u5B9E\\u73B0\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Typescript\"\n  }), \"type Extract<T, U> = T extends U ? T \\uFF1A never;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"使用","depth":2},{"value":"转换","depth":2},{"value":"Partial 全部指定为可选类型","depth":3},{"value":"示例","depth":4},{"value":"实现","depth":4},{"value":"部分指定为可选类型","depth":3},{"value":"实现","depth":4},{"value":"示例","depth":4},{"value":"过滤","depth":2},{"value":"Pick 选取指定的类型","depth":3},{"value":"示例","depth":4},{"value":"实现","depth":4},{"value":"Omit 去掉指定的类型。","depth":3},{"value":"示例","depth":4},{"value":"实现代码","depth":4},{"value":"Record","depth":3},{"value":"示例","depth":3},{"value":"实现","depth":4},{"value":"Exclude 排除可分配的类型","depth":3},{"value":"示例","depth":4},{"value":"实现","depth":4},{"value":"Extract 选择可分配的类型","depth":3},{"value":"示例","depth":4},{"value":"实现","depth":4}],"frontmatter":{"title":"Typescript 类型","date":"2019-09-12","description":"Typescript ES2015 类型"}},"file":{"relativePath":"ts-type.pdf","publicURL":"/blog/static/ts-type-f279c752245a0270ad06045fe188c2fe.pdf"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ts-type/","previous":{"fields":{"slug":"/js-link-list/"},"frontmatter":{"title":"Javascript 中的链表结构"}},"next":{"fields":{"slug":"/es6-map-set-ts/"},"frontmatter":{"title":"ES6 Set、Map 在 Typescript 中的使用"}}}}}